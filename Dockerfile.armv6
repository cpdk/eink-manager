FROM --platform=$BUILDPLATFORM node:20-slim AS builder

# Install cross-compilation tools
RUN dpkg --add-architecture armhf && \
    apt-get update && apt-get install -y \
    crossbuild-essential-armhf \
    python3-full \
    python3-venv \
    build-essential \
    pkg-config \
    libpixman-1-dev:armhf \
    libcairo2-dev:armhf \
    libpango1.0-dev:armhf \
    libjpeg-dev:armhf \
    libgif-dev:armhf \
    librsvg2-dev:armhf \
    git \
    gcc-arm-linux-gnueabihf \
    g++-arm-linux-gnueabihf \
    make \
    python3-pip \
    python3-numpy \
    python3-pillow \
    libtiff-dev:armhf \
    libatlas-base-dev:armhf \
    && rm -rf /var/lib/apt/lists/*

# Set up for arm cross compilation
ENV ARCH=arm
ENV CROSS_COMPILE=arm-linux-gnueabihf-
ENV CC=arm-linux-gnueabihf-gcc
ENV CXX=arm-linux-gnueabihf-g++
ENV QEMU_LD_PREFIX=/usr/arm-linux-gnueabihf
ENV PKG_CONFIG_PATH=/usr/lib/arm-linux-gnueabihf/pkgconfig

# Set up Python virtual environment
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install Python dependencies in virtual environment
RUN pip3 install --no-cache-dir \
    RPi.GPIO \
    spidev \
    pillow \
    numpy

WORKDIR /app

# Copy package files
COPY api/package*.json api/
COPY ui/package*.json ui/

# Install dependencies for both projects
WORKDIR /app/api
RUN npm ci --target_arch=arm --target_platform=linux --target_libc=glibc --ignore-scripts

# Install and build canvas separately with proper flags
RUN npm install canvas@2.11.2 --target_arch=arm --target_platform=linux --target_libc=glibc --build-from-source \
    --canvas_binary_host_mirror=https://github.com/Automattic/node-canvas/releases/download/ \
    && cd node_modules/canvas && \
    node-gyp rebuild --target_arch=arm --target_platform=linux --target_libc=glibc \
        --arch=arm \
        --target_arch=arm \
        --arm_version=6 \
        --arm_float_abi=hard \
        --arm_fpu=vfp

WORKDIR /app/ui
RUN npm ci

# Copy source files
WORKDIR /app
COPY . .

# Build UI
WORKDIR /app/ui
RUN npm run build

# Build API
WORKDIR /app/api
RUN npm run build

# Create the release package
WORKDIR /app
RUN mkdir -p /app/release/api/dist \
    && mkdir -p /app/release/ui \
    && mkdir -p /app/release/bin \
    && mkdir -p /app/release/public \
    && cp -r api/dist/* /app/release/api/dist/ \
    && cp -r api/node_modules /app/release/api/ \
    && cp api/package.json /app/release/api/ \
    && cp -r dist/ui/* /app/release/ui/ \
    && cp bin/install.sh /app/release/bin/ \
    && cp bin/start.sh /app/release/bin/ \
    && if [ -d "public" ]; then cp -r public/* /app/release/public/; fi

# Create a dependencies installation script
RUN echo '#!/bin/bash\n\
apt-get update\n\
apt-get install -y \
    python3-full \
    python3-venv \
    python3-pip \
    python3-rpi.gpio \
    python3-spidev \
    python3-numpy \
    python3-pillow \
    libtiff-dev \
    libatlas-base-dev \
    libcairo2 \
    libpango1.0-0 \
    libjpeg62-turbo \
    libgif7 \
    librsvg2-2\n\
\n\
# Set up Python virtual environment\n\
python3 -m venv /opt/eink-venv\n\
/opt/eink-venv/bin/pip install --no-cache-dir RPi.GPIO spidev pillow numpy\n\
' > /app/release/bin/install-deps.sh \
    && chmod +x /app/release/bin/install-deps.sh

# Update install.sh to use install-deps.sh
RUN sed -i '1a\\\n# Install system dependencies\nbash "$(dirname "$0")/install-deps.sh"' /app/release/bin/install.sh

# Create the final tarball
WORKDIR /app/release
RUN tar czf /app/eink-release-armv6l.tar.gz . 